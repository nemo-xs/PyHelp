# СИНТАКСИС
# (_) - подчеркивание в пустых скобках обозначает предыдущее значение.

# Идентификатор - имя объекта. Какой то функции, переменной, класса в
# программе. Может состоять из больших и маленьких букв, цифр, знаков
# подчеркивания. Не может начинаться с цифры. Регистр имеет значение. Не может
# совпадать с синтаксисом языка.

# Переменная - ссылка на какой либо объект. Записывается маленькими буквами
# через знаки подчеркивания: my_variable.

# Константа - значение не предназначенное для изменения. Принято писать
# большими буквами: MY_CONSTANT. Такое обозначение используется только для себя
# (чтобы случайно не изменить). Чтобы сделать объект доступным только для
# чтения см. курс Essential.

# Тип данных - определяет возможные значения данных и их смысл. В Python
# используются динамические типы данных. То есть моггут меняться (но это не
# желательно). В большинстве языков - типы задаются и не меняются на протяжении
# всей программы.

# int, float, complex и другие - тип данных числа.

# float - число с запятой. Записывется 5.3 или 5. Для больших или маленьких
# чисел используется как возведение в степень через e. Например 5е3 - 5*10 в 3
# степени. Можно возводить и в отрицательную степень, например 5е-3 = 5*10 в
# минус 3 стпени.

# bool - часть int, для логики. Только 1 или 0. True или False
# соответственно. Всегда пишется с большой буквы.

# Контейнеры и последовательности str, tuple - неизменные. list - изменяемая.
# None - пустой тип. Объявления переменной не имеющей значения.(с большшой)


# Изменением типа переменных можно преобразовывать строки в числа и наоборот.
# например:

stroka = "143"  # Объявление строковой переменной.. То есть она у нас текст.
int(stroka)  # использование данных из строковой переменной как числа.
nom = int(stroka)  # Преобразование данных из переменной stroka в целое
# число и в переменную nom, которую уже можно использовать при расчетах и т. п.


# Ввод чисел в других системах:
0b01000110100  # - двоичная система. Также для нее есть функция bin()
0o1274653621367  # - восьмеричная система. Есть функция oct()
0x123ABCDEF  # - шестнадцатеричная система. Есть функция hex()

number = 21342134
print(number)

# Переменнst
c = ""  # Простое объявление пустой строковой переменной.
d = int()  # Простое объявление переменной типа int
x = None  # объявление переменной (в данном случае совсем пустой, без типа).
y = 5  # объявление второй переменной. На сей раз тип int
x = 10  # теперь перменной задано значение (в реале может появляться откуда

# Разделение алгоритма
if x > y:  # if - это Eсли. X > Y это Условие, логическое выражение. Должно
    # возвращать True или False - то есть тип данных на выходе bool (булеан)
    pass  # Тут укаываются операторы. То есть последовательность каких либо
    # действий (например сложение). Обязательный параметр. Если ничего то pass
else:  # else Иначе. Если ранние условия не выполнены, то выполняется оно.
    print(x - y)  # Любые другие операторы. Если ничего, то pass

# Цикл
# управяющая конструкция для многократного исполнения набора инструкций
# Виды циклов:
# с предусловием - while
while x < y:  # while (ПОКА) выполняется X > Y (Условие). Булево. Истина/Ложь
    pass  # Операторы, то есть делать то то... до тех пор пока выполнятеся
    # условие. Ну или ничего - тогда pass. Если условие изначально False, цикл
    # не выполнится ни разу.

# с постусловием - do while
# со счетчиком, и совместный - for

# ФУНКЦИИ. Они же Подпрограммы. Процедуры. Это именованный участок кода, к
# которму можно неоднократно обращаться. Могут принимать параметры (аргументы)
# и возвращать значения. А могут и не возвращать. Когда не возвращает, то на
# самом деле возвращает значение None.

# Всегда отделяется от кода двумя абзацами сверху и снизу. Создается через
# единый оператор def. После создания может использоваться путем вызова
# множество раз.

# Есть вшитые функции: int, input, print, id и другие.
# Список и описание функций - https://youtu.be/KSL_32HvBew
# Справка по любой функции вшита. Вызывается help(название функции)


def funct():  # func это название функции. В скобках, ее параметры. Если
    # параметров много, то через ",". Тут формальные параметры. Меняются при
    # вызове (см ниже).
    """ Стока стоящая в самом начале функции - это документация к функции
    """
    # внутри тройных кавычек документация к функции. Закрывающие кавычки
    # ставятся на отдельной строке. Не обязательный параметр.
    pass  # Тут расписывается то, что она делает. То есть сама подпрограмма.


funct()  # а это вызов функции в любм месте кода. Внутри скобок указывается
# локальное значение, то есть то, с каким аргументом она используется. То есть
# фактический параметр. Или пустые скобки. Тогда применяется формальный.


# Списки и массивы.
# Массив - набор фиксированного количества однотипных элементов, расположенных
# в памяти непосресдственно друг за другом, достп к которым осуществляется по
# их индексу. - array(). Не могут меняться. Только пересозадваться.
# Список - тип данных, предстваляющих собой упорядоченную последовательность
# определенных значений, которые могут повторяться. Количество элементов списка
# произвольное. list () Если создавать без функции, то квадратные скобки
# 